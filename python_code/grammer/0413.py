'''

분기문 ===> 어떤 메모리 주소에서 어떤 메모리 주소로 jump하게 하는 것
-break : 반복문 빠져나간다
-return : 함수를 빠져나가면서 최종값을 던져준다
-goto(c언어) code_a : code_a로 돌아간다(도돌이표) 	//가독성 더러워서 회사에서 절대 안씀

함수의 관점에서 output이란 오직 리턴값만 의미. print()로 뭔가 출력했다고 해서 output이 있다는 건 아니다
output만이 함수가 호출된 곳에서 리턴되어 담길 수 있음. 리턴값 없으면 NoneType의 None 담김		//오류x
cf. 데이터 다루다 보면 빈 공간이  NA, None 등으로 자동적으로 채워진 것을 볼 수 있음. 

매개변수 지정해서 넘겨주기, 초기값 설정
def add(b, a, bool=True):	//매개변수 초기값 미리 설정
    if bool:
        return a+b
print(add(a=3, b=7))	//인수랑 매개변수 이름이 같아야 함. 순서 다르지만 b=7, a=3으로 들어감

여러 개의 input값 받는 파라미터 *args
def add_many(a, *args):
    result=0
    print(a)
    for i in args:		//args == (1, 2, 3, 4, 5), type(args) == 튜플, 요소에 하나씩 접근하려고 for문 사용
        result+=i
    return result
print(add_many("Add", 1, 2, 3, 4, 5))

딕셔너리 쌍을 input으로 받는 키워드 파라미터 **kwargs
def print_kwargs(**kwargs):
    print(kwargs)	
print_kwargs(a=1)		//딕셔너리 쌍 'a' : 1을 인수로 넣어줌
----------------------------------------
>>>{'a' : 1}

리턴값 2개 이상이면 무조건 하나로 묶인 (튜플)로 리턴됨♣	    //오류x

함수 안의 변수 vs. 함수 밖의 변수♣
a=1
def vartest(a):	//이름은 같지만 함수 밖의 a와 완전히 다른 변수(주소는 다르고 안에 담긴 value값만 같음. )
    a=a+1	
vartest(a)		//a의 주소 자체가 아니라, a가 가리키는 주소에 담긴 value값만을 넘겨준 것
print(a)
---------------------------------------
>>>1		//2가 아니라 1이 출력
함수가 실행되면 '데이터 메모리 공간'(함수 밖)에서 '스택 메모리 공간'(함수 안)으로 넘어감. 
함수가 끝나자마자 다시 '데이터 메모리 공간'으로 들어오고, 사용된 '스택 메모리 공간'은 사라짐.
return을 통해 '데이터 메모리 공간'까지 전달해주어서 함수 안에서 벌어진 무의미한 일이 유의미해짐

global 최대한 사용x. 
함수 내부와 외부의 연결은 매개변수와 리턴값 둘 뿐인 것으로 통일하면 좋다. 
디버깅할 때는 global 종종 쓰임. 함수 내부 변수는 함수 끝나면 사라지니까 스파이더의 Variable explorer 탭에서 값 확인 불가능해서 global로 정의해서 확인할 수 있으므로

lambda
함수를 한 줄로 간결히 생성할 때 사용
add = lambda a, b : a+b	//add라는 함수는 a와 b를 매개변수로 받아 a+b를 리턴한다
print(add(3, 4))
--------------------------
>>>7

'''